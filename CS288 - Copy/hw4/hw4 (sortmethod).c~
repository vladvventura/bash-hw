#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LINE_LENGTH 130

void build_a_lst(),print_a_line(),print_lst();
void insert_at_end();
void int_radix_sort();
int getCpValue();

struct clip {
  int views;
  char *user;
  char *id;
  char *title;
  char *time;
  struct clip *next;
} *head, *head2;

int main(int argc, char **argv) {
  build_a_lst(*(argv+1));
  printf("unsorted:\n");
  print_lst(head);		/* prints the table */
  int_radix_sort(head);
  //print_lst(head);		/* prints the table but now sorted */
  return 0;
}

void build_a_lst(char *fn) {
  FILE *fp;
  char line[LINE_LENGTH];
  //  char *line;
  if ((fp = fopen("table.txt","r")) != NULL) {
    while (fgets(line, LINE_LENGTH, fp) != NULL) {
      insert_at_end(line);	/* insert a user at end of the list */
    }
    fclose (fp);
  }
}

void insert_at_end(char *s)
{
  struct clip *cp, *tp;
  char *token;
  char *buff;
  char delim[]=",";
  char *fields[5];
  int i=0;

  //first and foremost, initialize ur TP
  tp=malloc(sizeof(struct clip));
  tp->next=NULL;

  //can't tokenize a literal, so copy into buff
  buff=malloc(strlen(s));
  strcpy(buff,s);

  token=strtok(buff,delim); //first iteration (Views)
  fields[i]=malloc(strlen(token));
  strcpy(fields[i++],token);




  while(token!=NULL)
    {
      token=strtok(NULL,delim);
      if(token!=NULL) //the token might become null. thats where seg fault came from -.-
        {
          //printf("%s\n",token);
          fields[i]=malloc(strlen(token));
          strcpy(fields[i++], token);
        }
    }

  i=0;

  tp->views=malloc(sizeof(atoi(fields[i])));
  tp->views=atoi(fields[i++]);
  tp->user = malloc(strlen(fields[i]));
  tp->user = fields[i++];
  tp->time = malloc(strlen(fields[i]));
  tp->time = fields[i++];
  tp->title = malloc(strlen(fields[i]));
  tp->title= fields[i];

  //done instantiating all values for tp. now to stick it into the linked list.

  if (head==NULL)
  {
    head=tp;
  }
  else
  {
    cp=head;
    while (cp->next!=NULL)
      {
	cp=cp->next;
      }
    cp->next=tp;
  }
  
}

void int_radix_sort(struct clip *cp) {
  int n = 65536; //bucket size is 8 bits,which  =256 bit-combinations (2^8)
  int mask=n-1; //mask is bucket size-1.
  int cnt[n];
  int map[n];
  int round=0;
  int i;
  int index; //index for moving from head to head2 linked lists. (for the move op)

    //we have no lst here; instead it's a linked list. i corresponds to the
    //location of an element in the linked list.
  int listSize=0; //the size of head1
  struct clip *tp=head; //alternatively, i could have set tp to cp.
  while(tp!=NULL)
    {
      listSize++; //i need the listSize for linked list 2; see below.
      tp=tp->next;
    }


  struct clip *cp2, *tp2; //these point to locations in linked list 2.
  //linked list 2 is where the first radix iteration will head into.
    for(i=0; i<listSize;i++)//first recreate and allocate new linked list
      {
        tp2=malloc(sizeof(struct clip));
        tp2->next=NULL;
        if (head2==NULL)
        {
          head2=tp2;
        }
        else
        {
          cp2=head2;
          while (cp2->next!=NULL)
            {
	      cp2=cp2->next;
            }
          cp2->next=tp2;
        }
      }
//now the actual sort.
	//sort(head2, head, listSize, round); //destination, source, size, round.
  //initialize cnt
  for(i=0; i<n; i++)
    cnt[i]=0;
  //count
  for(i=0; i<listSize; i++) //we go through the list, 
    {
      cnt[getCpValue(cp,i)>>16*round&mask]++;  //LSR by 8 because of 8 bits. also, remember cp is changed in the method
      cp=head;//so, put cp back to head, which is what it was originally pointing to.
    }
  //map
  map[0]=0;
  for(i=1; i<n;i++)
    {
      map[i]=map[i-1]+cnt[i-1];
    }

    //"move"... what we're really doing is recreating the linked list.
 
  for(i=0; i<listSize;i++)//now we can move stuff over.
    {
      index=map[getCpValue(cp,i)>>16*round&mask];//get the index for head2
      cp=head; //again, reset cp to head.
      map[getCpValue(cp,i)>>16*round&mask]++;//increment the map index.
      cp=head; //again.
      //we take the location in head2, and set it equal to the memory in head1
      int i1=0; //temp index for head
      int i2=0; //temp index for head2
      //find index in head2. this is what we want to modify.
      cp2=head2;
      while(i2<index && cp2->next!=NULL)
	{
	  cp2=cp2->next;
	  i2++;
	}
      //im at the cp index location ofhead2.
      cp=head;
      while(i1<i && cp->next!=NULL) //get to the location of i in head's list
	{
	  cp=cp->next;
	  i1++;
	}

      //now, the actual move!
      cp2->views=malloc(sizeof(cp->views));
      cp2->views=cp->views;
      cp2->user = malloc(strlen(cp->user));
      cp2->user = cp->user;
      cp2->time = malloc(strlen(cp->time));
      cp2->time = cp->time;
      cp2->title = malloc(strlen(cp->title));
      cp2->title= cp->title;
      cp=head;//and again, set cp to head.
    }
round++;
//that was the first iteration...





  printf("sorted\n");                 
  print_lst(head2);
 
}

int getCpValue(struct clip *cp, int i) //int because we are sorting views
{
  int index=0;
  while(cp->next!=NULL && index<i)
    {
      cp=cp->next;
      index++;
    }

  return cp->views;
}


/* prints all the users */
void print_lst(struct clip *cp) {
  while (cp->next!=NULL)
    {
      printf("%-10d %-30s %-6s %-40s\n",cp->views,cp->user,cp->time,cp->title);
      cp=cp->next;
    }
}

/* end */
